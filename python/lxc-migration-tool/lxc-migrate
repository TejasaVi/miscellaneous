#!/bin/python

import argparse
import getpass
import logging
import os
import paramiko
import subprocess
import tarfile

passwd = ""
SSH_PORT = 22
DEFAULT_PATH = "/.local/share/lxc/"
LOG_FILE = "lxc-migration.log"


try:
    import lxc
    lxc_installed = True
except ImportError, e:
    lxc_installed = False
    pass


logger = logging.getLogger("lxc_migrator")
logger.setLevel(logging.DEBUG)
fh = logging.FileHandler(LOG_FILE, 'a')
fh.setLevel(logging.DEBUG)
logger.addHandler(fh)
logger.info("Logger intialized")


"""
Arguement Options:
-h, --help
-n, --name
-r, --remote_host
-p, --path (optional)
-a, --auto-start (optional)
-u, --user (remote host user)

"""


class ContainerMigrator(object):

    def __init__(self, d):
        for key in d:
            setattr(self, key, d[key])
        self.__get_ssh_client()

    def cleanup(self):
        logger.debug("Going for cleanup")
        self._sftp.close()
        self._ssh_client.close()

    def cold_migrate(self):
        try:
            self._stop_container()
            self._archive_container()
            self._copy_remote()
            self._remote_extract()
            if self.auto_start:
                self._remote_start_container()
        except Exception as e:
            logger.debug(e)

    def live_migrate(self):
        return

    def snapshot_migrate(self):
        return

    def clone_migrate(self):
        return

    def __setpass__(self, passwd):
        self.passwd = passwd

    def __get_ssh_client(self):
        self._ssh_client = paramiko.SSHClient()
        self._ssh_client.load_system_host_keys()
        self._ssh_client.set_missing_host_key_policy(paramiko.WarningPolicy)
        logger.debug("Using IP: {0} PORT:{1} for ssh connection".format(self.remote_host, SSH_PORT))
        self._ssh_client.connect(
            self.remote_host, port=SSH_PORT, username=self.user, password=self.passwd)
        self._sftp = self._ssh_client.open_sftp()

    def _archive_container(self, path=None):
        try:
            if not path:
                path = "{0}{1}{2}".format(
                    os.environ["HOME"], DEFAULT_PATH, self.name)
            logger.debug("Container Path: {0}".format(path))
            with tarfile.open(self.name + ".tar.gz", "w:gz") as tar:
                tar.add(path, arcname=os.path.basename(path))
            self.tarfile = os.path.abspath("{0}.tar.gz".format(self.name))
        except Exception as e:
            raise

    def _exec_cmd(self, cmd, remote=False):
        try:
            if remote:
                logger.info("[Remote]:{0}".format(cmd))
                ret = {}
                stdin, stdout, stderr = self._ssh_client.exec_command(cmd)
                ret = {"exit_code": stdout.channel.recv_exit_status(
                ), "stdout": stdout.read(), "stderr": stderr.read()}
                return ret
            exit_code = os.system(cmd)
            logger.info("[Local]: {0}".format(cmd))
        except Exception as e:
            raise

    def _copy_remote(self):
        try:
            cmd = "echo $HOME"
            ret = self._exec_cmd(cmd, remote=True)
            self.remote_home = ret["stdout"].replace("\n", "")
            # create a directory
            cmd = "mkdir -p {0}{1}".format(
                self.remote_home, DEFAULT_PATH)
            self._exec_cmd(cmd, remote=True)
            # change ownership of directory
            cmd = "chown 100000:{1} {0}{2}".format(
                self.remote_home, self.user, DEFAULT_PATH)
            self._exec_cmd(cmd, remote=True)
            self._sftp.put(self.tarfile, self.remote_home +
                           "{0}{1}.tar.gz".format(DEFAULT_PATH, self.name))
        except Exception as e:
            raise

    def _remote_extract(self):
        try:
            # untar container.
            cmd = "cd {0}{2}; tar --numeric-owner -xzvf {1}.tar.gz".format(
                self.remote_home, self.name, DEFAULT_PATH)
            self._exec_cmd(cmd, remote=True)
        except Exception as e:
            raise

    def _stop_container(self):
        try:
            cmd = "lxc-stop -n {0}".format(self.name)
            self._exec_cmd(cmd)
        except Exception as e:
            raise

    def _remote_start_container(self):
        try:
            cmd = "lxc-start -n {0}".format(self.name)
            self._exec_cmd(cmd, remote=True)
        except Exception as e:
            raise


def add_options(parser):
    try:
        parser.add_argument("-n", "--name", required='True',
                            help="Container Name to migrate")
        parser.add_argument("-u", "--user", required='True',
                            help="Remote Host Username")
        parser.add_argument("-p", "--path", help="Container RootFS path")
        parser.add_argument("-a", "--auto-start", action='store_false',
                            default=False, help="Flag to auto start container on remote host")
        parser.add_argument("-r", "--remote_host",
                            required='True', help="Remote Host IP")
    except Exception as e:
        raise


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    add_options(parser)
    args = vars(parser.parse_args())
    args['passwd'] = getpass.getpass(
    ) if not passwd else args.__setattr__("passwd", passwd)
    cm = ContainerMigrator(args)
    cm.cold_migrate()
