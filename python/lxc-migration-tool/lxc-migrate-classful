#!/bin/python

import argparse
import getpass
import paramiko
import subprocess

try:
    import lxc
    lxc_installed = True
except ImportError, e:
    lxc_installed = False
    pass


passwd = ""

"""
Arguement Options:
-h, --help
-n, --name
-r, --remote_host
-p, --path (optional)
-a, --auto-start (optional)
-u, --user (remote host user)

"""
class ContainerMigrator(object):
    def __init__(self):
        self._ssh_client = ""
        self._sftp = ""
        return

    def cleanup(self):
        self._sftp.close()
        self._ssh_client.close()

    def cold_migrate(self):
        return

    def live_migrate(self):
        return

    def live_migrate(self):
        return

    def snapshot_migrate(self):
        return

    def clone_migrate(self):
        return

    def _get_ssh_client(self):
        self._ssh_client = paramiko.SSHClient()
        self._ssh_client.load_system_host_keys()
        self._ssh_client.set_missing_host_key_policy(paramiko.WarningPolicy)
        self._ssh_client.connect(self.remote_host, port=22, username=self.user, password=self.passwd)
        self._sftp = self._ssh_client.open_sftp()

    def _archive_container(self,path=None):
	try:
	    if not path:
		# TODO: get absolute path
		path = "$HOME/.local/share/lxc/{0}".format(self.name)
	    cmd = "tar --numeric-owner -czvf {0}.tar.gz {1}/*".format(self.name, path)
	    self._exec_cmd(cmd)
	    #self.__setattr__('tarfile',"{0}.tar.gz".format(self.name))
            self.tarfile = "{0}.tar.gz".format(self.name)

	except Exception as e:
	    raise

    def _exec_cmd(self, cmd, remote=False):
	if remote:
	    print "[Remote]:{0}".format(cmd)
	    ret = {}
	    #exit_code, stdout, stderr = self._ssh_client.exec_command(cmd)
	    #ret = {"exit_code":stdout.channel.recv_exit_status(),"stdout": stdout.read(), "stderr": stderr.read()}
	    return ret
	cmd_args = cmd.split()
	print cmd_args
	proc = subprocess.Popen(cmd_args,stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	stdoutdata, stderrdata = proc.communicate()
	exit_code = proc.wait()
	ret = {"exit_code":exit_code,"stdout": stdoutdata, "stderr": stderrdata}
	return ret

    def _copy_remote(self):
	try:
	    self._sftp.put(self.tarfile, ".local/share/lxc/")
	except Exception as e:
	    raise

    def _remote_extract(self):
	try:
	    # create a directory
	    cmd = "mkdir $HOME/.local/share/lxc/{0}".format(self.name)
	    self._exec_cmd(cmd, remote=True)
	    # change ownership of directory
	    cmd = "chown 100000:$USER $HOME/.local/share/lxc/{0}".format(self.name)
	    self._exec_cmd(cmd, remote=True)
	    # untar container.
	    cmd = "tar --numeric-owner -xzvf {0} $HOME/.local/share/lxc/{1}".format(self.tarfile, self.name)
	    self._exec_cmd(cmd, remote=True)
	except Exception as e:
	    raise

    def _remote_start_container(self):
	try:
	    cmd = "lxc-start -n {0}".format(self.name)
	    exec_cmd(cmd, self, remote=True)
	except Exception as e:
	    raise


def add_options(parser):
    try:
        parser.add_argument("-n", "--name", required='True', help="Container Name to migrate")
        parser.add_argument("-u", "--user", required='True', help="Remote Host Username")
        parser.add_argument("-p", "--path", help="Container RootFS path")
        parser.add_argument("-a", "--auto-start", action='store_false', default=False, help="Flag to auto start container on remote host")
        parser.add_argument("-r", "--remote_host", required='True', help="Remote Host IP")
    except Exception as e:
        raise

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    add_options(parser)
    args = vars(parser.parse_args())
    import pdb;pdb.set_trace()
    #args.__setattr__("passwd", getpass.getpass()) if not passwd else args.__setattr__("passwd", passwd)
